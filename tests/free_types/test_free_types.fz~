# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test test_free_types
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

test_free_type is

  # free type with explicit constraint
  #
  a1(v T : Any    ) => say "a: $T $v"
  a2(v T : numeric) => say "a: $T {v+v}"
  a1 42
  a1 "fourty two"
  a2 42
  # a3 "fourty two"    -- should cause an error

  # free type with implicit constraint `Any`
  #
  b(v T) => say "b: $T $v"
  b 47.11
  b "hello"

  # free type used for two arguments
  #
  c1(v, w T)   => say "c1: $T $v $w"
  c2(v T, w T) => say "c2: $T $v $w"
  c1 3.14 2.18
  c1 "pi" "e"
  # c1 3.14 "e"    -- should cause an error
  c2 3.14 2.18
  c2 "pi" "e"
  # c2 3.14 "e"    -- should cause an error

  # anonymous free type used for two arguments
  #
  d(v, w _) => say "d: $v $w"
  d 3.14 2.18
  d "pi" "e"
  d Any [1,3,5]
  d "[1,3,5]" Any
  # d 3.14 "e"    -- should cause an error

  # two anonymous free types used for two arguments
  #
  e(v _, w _) => say "e: $v $w"
  e 3.14 2.18
  e "pi" "e"
  e Any [1,3,5]
  e "[1,3,5]" Any
  e 3.14 "e"       # this works since both `_` are different

  # not free types, but bound types that are inferred from the call site:
  #
  f(v,w) => say "f: $v $w"
  f "[1,3,5]" Any
  # f 3.14 "e"    -- should cause an error

  # two free types with constraints used inside an inline choice type
  #
  g(v (A : Any) | (B : numeric)) =>
    say "g: $A $B"
    match v
      a A => say "g: A $a"
      b B => say "g: B $b"

  ga1 String | i32 := 42
  ga2 String | u8  := "fourty two"
  g ga1
  g ga2

  # mixture of explicit and free type parameters
  #
  h(T type, v T, w U) => say "h: $T $U $v $w"
  h 42 "Hello"

  # free types as type parameters to Sequence
  #
  x1(s Sequence T, v T) => [v] ++ s ++ [v]
  say "x1: {x1 [4,6,4] 1}"

  # different type parameters result in incompatible types
  #
  # x2(s Sequence T, v U) => [v] ++ s ++ [v]    -- should cause an error.
  # say "x2: {x2 [4,6,4] 1}"

  # explicit type as type parameter to Seuqnce
  #
  x3(T type, s Sequence T, v T) => [v] ++ s ++ [v]
  say "x3: {x3 [4,6,4] 1}"

  # typo in a type that turns it into an accidental free type
  #
  # neg(x i33) => -x       -- should cause an error that is not too confusing
  # say (neg 42)
