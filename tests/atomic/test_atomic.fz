# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test atomic
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------


# test concur.atomic
#
test_atomic is

  chck(T type: equatable, x, y T) =>
    if x = y
      say "PASSED $x = $y"
    else
      say "FAILED $x /= $y"

  test(T type : equatable, a, b, c, d T) =>
    a1 := concur.atomic a
    chck a1.read a
    a1.write b
    chck a1.read b
    o := a1.compare_and_swap c d
    chck a1.read b
    o := a1.compare_and_swap b c
    chck a1.read c
    o := a1.compare_and_swap b d
    chck a1.read c
    if a1.racy_accesses_supported
      chck a1.racy_read c
      a1.racy_write d
      chck a1.racy_read d

  p(x, y i64) : equatable is
    fixed type.equality(a, b test_atomic.p) => a.x = b.x && a.y = b.y
    redef as_string => "$x,$y"

  test 1 2 3 4
  test 0.1 0.2 0.3 0.4
  test true true false false
  test "A" "B" "C" "D"
  test (p 1 1) (p 2 2) (p 3 3) (p 4 4)

  if false  # NYI: disable the following tests, they crash both interpreter and compiler

    a := concur.atomic i64 0x1000000010000000
    c1 := concur.atomic i64 0
    s1 := concur.atomic i64 -1
    c2 := concur.atomic i64 0
    s2 := concur.atomic i64 -1

    concur.thread.spawn (()->
      end := time.nano.read + (time.durations.seconds 5).nanos
      for
        s := i64 0, o=v ? s+1 : s
        c in (i64 0)..
      while time.nano.read < end do
        v := a.read
        n := v + 1
        o := a.compare_and_swap v n
      else
        c1.write c
        s1.write s
      )

    concur.thread.spawn (()->
      end := time.nano.read + (time.durations.seconds 5).nanos
      for
        s := i64 0, o=v ? s+1 : s
        c in (i64 0)..
      while time.nano.read < end do
        v := a.read
        n := v + 0x1_0000_0000
        o := a.compare_and_swap v n
      else
        c2.write c
        s2.write s
      )

    while s1.read < 0 do
      time.nano.sleep (time.durations.ms 500)
    while s2.read < 0 do
      time.nano.sleep (time.durations.ms 500)

    say "thread 1: "+s1.read+"/"+c1.read
    say "thread 2: "+s2.read+"/"+c2.read
    say "a is "+a.read.hex
