# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test
#
# -----------------------------------------------------------------------

ex_tree is
  Node(A, B, C type) ref is
    datum A is abstract
    count i32 is abstract
    left B is abstract
    right C is abstract

  tree(A type : property.orderable) : choice nil (Node A (tree A) (tree A)) is

    size i32 is
      tree.this ? nil    => 0
                | n Node => n.count

    private smart (datum A, left, right tree A) tree A is
      ref : Node A (tree A) (tree A)
        datum A is smart.this.datum
        count i32 is (1 + smart.this.left.size + smart.this.right.size)
        left tree A is smart.this.left
        right tree A is smart.this.right

  trees is
    empty(A type : property.orderable) tree A is
      nil

  x := (trees.empty i32).smart 42 nil nil
  say x
