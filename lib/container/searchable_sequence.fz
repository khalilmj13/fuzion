# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature searchable_sequence
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# searchable_sequence -- a Sequence whose elements inherit from property.equatable
#
#
public searchable_sequence(public A type : property.equatable,
                           from Sequence A                   ) : Sequence A,
                                                                 property.equatable
is

  # create a list from this searchable_sequence.
  #
  public redef as_list => from.as_list


  # is this sequence known to be finite?  For infinite sequences, features like
  # count diverge.
  #
  public redef finite => from.finite


  # does this sequence start with l?
  #
  public starts_with(l Sequence A) bool =>
    # NYI: BUG: This could be implemented as
    #
    #   l.is_prefix_of from
    #
    # but this currently causes a failure in tests/nom, need to check why.
    #
    match l.as_list
      nil    => true
      c2 Cons =>
        match from.as_list
          nil     => false
          c1 Cons => c1.head = c2.head && (searchable_sequence c1.tail).starts_with c2.tail # tail recursion


  # get the index of l within this list or nil if it does not exist
  #
  public find(l Sequence A) option i32 =>
    if starts_with l
      0
    else
      match from.as_list
        nil     => nil
        c1 Cons => ((searchable_sequence c1.tail).find l) >>= n -> n + 1


  # equality check implementation for inherited property.equatable
  #
  public fixed redef type.equality(a, b container.searchable_sequence A) bool =>
    aa := a.as_array
    ba := b.as_array
    aa.count = ba.count
      && ((0..(a.count - 1)) âˆ€ (i -> aa[i] = ba[i]))
