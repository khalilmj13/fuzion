# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature composition
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# composition -- a collection of features for function composition
#
# see https://mlochbaum.github.io/BQN/tutorial/combinator.html
#     https://combinatorylogic.com/table.html
#
# Talk at Strange Loop 2016 by Amar Shah: Point-Free or Die: Tacit Programming in Haskell and Beyond
# https://www.youtube.com/watch?v=seVSlKazsNk
#
# Talk at CppNorth 2023 by Conor Hoekstra: Function Composition in Programming Languages - Conor Hoekstra - CppNorth 2023
# https://www.youtube.com/watch?v=JELcdZLre3s
#
# Paper by Conor Hoekstra: Combinatory Logic and Combinators in Array Languages
# https://web.archive.org/web/20220617020347id_/https://dl.acm.org/doi/pdf/10.1145/3520306.3534504
#
# BQN tutorial: https://mlochbaum.github.io/BQN/tutorial/index.html
#
# Bird names from Raymond M Smullyan. 2000. To Mock a Mockingbird: and other
# logic puzzles including an amazing adventure in combinatory logic. Oxford
# University Press, USA.
#
public composition is

  # I
  # identity
  # Bird: ?
  # BQN: ⊣⊢
  # Haskell id
  public id(T type) T -> T is x->x

  # K
  # Elementary Cancellator
  # Bird: Kestrel
  # BQN: ⊣
  # Haskell ?
  public left(T, U type) (T,U) -> T is (x,y) -> x

  # S
  # hook, monadic after
  # Bird: Starling
  # BQN: ⟜
  # Haskell: <*>
  public after1(f (T, U) -> V, g T -> U) T -> V is x -> f x (g x)

  # B
  # Elementare Compositor
  # Bird: Bluebird
  # BQN: ∘
  # Haskell: .
  public compose( f U -> V, g T -> U) T -> V => f ∘ g

  # B1
  # Elementare Compositor
  # Bird: Blackbird
  # BQN: ∘
  # Haskell: .: or ...
  public atop(f V -> W, g (T,U) -> V) (T,U) -> W is (x,y) -> f (g x y)

  # C
  # Elementary Permutator
  # Bird: Cardinal
  # BQN: ˜
  # Haskell: flip
  public flip(f (T,U) -> V) (U,T) -> V is (x,y) -> f y x

  # W
  # Elementary Duplicator
  # Bird: Warbler
  # BQN: ~
  # Haskell: join
  public join(f (T,T) -> U) T->U is x -> f x x

  # Ψ - psi
  # composition of binary and unary function
  # Bird: ?
  # BQN: ○
  # Haskell: on
  public over(f (U,U) -> V, g T -> U) (T,T) -> V is (x,y) -> f (g x) (g y)

  # Φ (S′)
  # composition of two unary functions and one binary function
  # Bird: ?
  # BQN: 3-train?
  # Haskell: liftA2
  public fork(f (U1,U2) -> V, g T1 -> U1, h T2 -> U2) (T1,T2) -> V is (x,y) -> f (g x) (h y)

  # Φ1
  # composition of two unary functions and one binary function
  # Bird: Pheasant (Hoekstra)
  # BQN: 3-train?
  # Haskell: ?
  public fork2(f (U1,U2) -> V, g (T1,T2) -> U1, h (T1,T2) -> U2) (T1,T2) -> V is (x,y) -> f (g x y) (h x y)

  # D
  # composition of one binary function f and one unary function g...
  # Bird: Dove
  # BQN: ⟜
  # Haskell:
  public after2(f (V, U) -> W, g T -> U) (V,T) -> W is (x,y) -> f x (g y)

  # D2
  # composition of one binary function g and tow unary functions f, h
  # Bird: Dovekie
  # BQN: a⊸b⟜c
  # Haskell:
  public d2(f T -> V, g (V,W) -> X, h U -> W) (T,U) -> X is (x,y) -> g (f x) (h y)

  # left ∘ flip
  # Bird: ?
  # BQN: ⊢
  public right(T, U type) (T,U) -> U is (x,y) -> y

  # ?
  # composition of one unary function f and one binary function g...
  # Bird: ?
  # BQN: ⊸
  public before1(f V -> U, g (U, V) -> W) V     -> W is x     -> g (f x) x
  public before2(f T -> U, g (U, V) -> W) (T,V) -> W is (x,y) -> g (f x) y

  # ?
  # Constant cancellator?
  # Bird: ?
  # BQN: ˙
  public const1(T, U    type, v T) U     -> T is x     -> v
  public const2(T, U, V type, v T) (U,V) -> T is (x,y) -> v
