# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature comparable_sequence
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# comparable_sequence -- a Sequence that inherits from has_equality
#
comparable_sequence(A type : has_equality, from Sequence A) : Sequence A, has_equality
is

  # create a list from this Sequence.
  #
  redef as_list => from.as_list


  # is this sequence known to be finite?  For infinite sequences, features like
  # count diverge.
  #
  redef finite => from.finite


  # equality check implementation for inherited has_equality
  #
  fixed type.equality(a, b comparable_sequence A) bool is
    aa := a.as_array
    ba := b.as_array
    if aa.count ≟ ba.count
      (0..(a.count - 1)) ∀ (i -> equals A aa[i] ba[i])
    else
      false
