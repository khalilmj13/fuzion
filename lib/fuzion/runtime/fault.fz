# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fault
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# fault -- effect that terminates a computation due to a runtime fault
#
public fault (
  # the handler this effect uses to fail
  p ((String, String))->void
  ) : eff.fallible (String,String) /* NYI: BUG: this type parameter is require, type inference results in NullPointException */ p
is


  # cause check fault with the given message
  #
  cause_check(msg String) =>
    cause ("check", msg)


  # install default fault handler
  type.install_default =>
    (new kind_and_msg->
      (kind, msg) := kind_and_msg
      fuzion.sys.fatal_fault kind msg
    ).default


  # create an instance of `fault` with the given error handler.
  #
  public fixed type.new(h ((String,String))->void) => fuzion.runtime.fault h


# fault with no argument returns fault.env, the currently installed
# runtime fault handler.
#
public fault =>
  fault.install_default
  fault.env


# cause a check fault with given msg argument, i.e., call fault.cause_check msg, i.e.,
# use the current fault effect to fail with the given message.
#
public check_fault(msg String) => fault.cause_check msg
